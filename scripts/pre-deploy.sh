#!/bin/bash

# üîç Valida√ß√£o Pr√©-Deploy
# Execute antes de fazer deploy para produ√ß√£o

echo "üîç Iniciando valida√ß√£o pr√©-deploy..."

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Contador de erros
ERRORS=0

echo ""
echo "üìã CHECKLIST DE VALIDA√á√ÉO"
echo "=========================="

# 1. Verificar se estamos na branch develop ou main
echo ""
echo "1Ô∏è‚É£ Verificando branch atual..."
CURRENT_BRANCH=$(git branch --show-current)
if [[ "$CURRENT_BRANCH" == "main" || "$CURRENT_BRANCH" == "develop" ]]; then
    echo -e "${GREEN}‚úÖ Branch v√°lida: $CURRENT_BRANCH${NC}"
else
    echo -e "${RED}‚ùå Branch inv√°lida: $CURRENT_BRANCH${NC}"
    echo "   Deploy s√≥ √© permitido de 'main' ou 'develop'"
    ERRORS=$((ERRORS + 1))
fi

# 2. Verificar se h√° mudan√ßas n√£o commitadas
echo ""
echo "2Ô∏è‚É£ Verificando mudan√ßas n√£o commitadas..."
if git diff-index --quiet HEAD --; then
    echo -e "${GREEN}‚úÖ Nenhuma mudan√ßa n√£o commitada${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  H√° mudan√ßas n√£o commitadas${NC}"
    echo "   Considere fazer commit antes do deploy"
fi

# 3. Executar type check
echo ""
echo "3Ô∏è‚É£ Executando verifica√ß√£o de tipos..."
if npm run type-check; then
    echo -e "${GREEN}‚úÖ Type check passou${NC}"
else
    echo -e "${RED}‚ùå Type check falhou${NC}"
    ERRORS=$((ERRORS + 1))
fi

# 4. Executar lint
echo ""
echo "4Ô∏è‚É£ Executando lint..."
if npm run lint; then
    echo -e "${GREEN}‚úÖ Lint passou${NC}"
else
    echo -e "${RED}‚ùå Lint falhou${NC}"
    ERRORS=$((ERRORS + 1))
fi

# 5. Tentar build
echo ""
echo "5Ô∏è‚É£ Testando build..."
if npm run build; then
    echo -e "${GREEN}‚úÖ Build bem-sucedido${NC}"
else
    echo -e "${RED}‚ùå Build falhou${NC}"
    ERRORS=$((ERRORS + 1))
fi

# 6. Verificar vari√°veis de ambiente cr√≠ticas
echo ""
echo "6Ô∏è‚É£ Verificando vari√°veis de ambiente..."

# Verificar se .env.local existe
if [ -f ".env.local" ]; then
    echo -e "${GREEN}‚úÖ Arquivo .env.local encontrado${NC}"
    
    # Verificar chaves cr√≠ticas
    if grep -q "NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY" .env.local; then
        echo -e "${GREEN}‚úÖ Clerk Publishable Key encontrada${NC}"
    else
        echo -e "${RED}‚ùå Clerk Publishable Key n√£o encontrada${NC}"
        ERRORS=$((ERRORS + 1))
    fi
    
    if grep -q "CLERK_SECRET_KEY" .env.local; then
        echo -e "${GREEN}‚úÖ Clerk Secret Key encontrada${NC}"
    else
        echo -e "${RED}‚ùå Clerk Secret Key n√£o encontrada${NC}"
        ERRORS=$((ERRORS + 1))
    fi
    
    if grep -q "SUPABASE_SERVICE_ROLE_KEY" .env.local; then
        echo -e "${GREEN}‚úÖ Supabase Service Role Key encontrada${NC}"
    else
        echo -e "${RED}‚ùå Supabase Service Role Key n√£o encontrada${NC}"
        ERRORS=$((ERRORS + 1))
    fi
    
    # Verificar se n√£o h√° chaves de teste em produ√ß√£o
    if [[ "$CURRENT_BRANCH" == "main" ]]; then
        if grep -q "pk_test" .env.local; then
            echo -e "${RED}‚ùå Chave de teste do Clerk detectada na branch main!${NC}"
            echo "   Use chaves de produ√ß√£o para deploy"
            ERRORS=$((ERRORS + 1))
        fi
        
        if grep -q "sk_test" .env.local; then
            echo -e "${RED}‚ùå Chave secreta de teste do Clerk detectada na branch main!${NC}"
            echo "   Use chaves de produ√ß√£o para deploy"
            ERRORS=$((ERRORS + 1))
        fi
    fi
else
    echo -e "${RED}‚ùå Arquivo .env.local n√£o encontrado${NC}"
    ERRORS=$((ERRORS + 1))
fi

# 7. Verificar se package.json est√° atualizado
echo ""
echo "7Ô∏è‚É£ Verificando package.json..."
if npm outdated; then
    echo -e "${YELLOW}‚ö†Ô∏è  H√° depend√™ncias desatualizadas${NC}"
    echo "   Considere atualizar antes do deploy"
else
    echo -e "${GREEN}‚úÖ Depend√™ncias atualizadas${NC}"
fi

# 8. Verificar tamanho do build
echo ""
echo "8Ô∏è‚É£ Verificando tamanho do build..."
BUILD_SIZE=$(du -sh .next 2>/dev/null | cut -f1)
if [ ! -z "$BUILD_SIZE" ]; then
    echo -e "${GREEN}‚úÖ Tamanho do build: $BUILD_SIZE${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  N√£o foi poss√≠vel determinar o tamanho do build${NC}"
fi

# Resultado final
echo ""
echo "=========================="
echo "üìä RESULTADO DA VALIDA√á√ÉO"
echo "=========================="

if [ $ERRORS -eq 0 ]; then
    echo -e "${GREEN}üéâ VALIDA√á√ÉO PASSOU! Deploy autorizado.${NC}"
    echo ""
    echo "üöÄ Pr√≥ximos passos:"
    echo "   1. Configure as vari√°veis de ambiente no Vercel/Netlify"
    echo "   2. Verifique o arquivo PRODUCTION-SETUP.md"
    echo "   3. Fa√ßa o push para triggerar o deploy autom√°tico"
    echo ""
    exit 0
else
    echo -e "${RED}‚ùå VALIDA√á√ÉO FALHOU! $ERRORS erro(s) encontrado(s).${NC}"
    echo ""
    echo "üîß Corrija os erros antes de fazer deploy:"
    echo "   1. Resolva os problemas listados acima"
    echo "   2. Execute novamente: npm run pre-deploy"
    echo "   3. S√≥ ent√£o fa√ßa o deploy"
    echo ""
    exit 1
fi