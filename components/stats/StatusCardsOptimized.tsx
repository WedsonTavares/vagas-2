/**
 * Arquivo: components/stats/StatusCardsOptimized.tsx
 * Prop√≥sito: Cards de status clic√°veis otimizados para navega√ß√£o e performance
 *
 * Otimiza√ß√µes implementadas:
 * - React.memo() para evitar re-renders desnecess√°rios
 * - useCallback() para callback de navega√ß√£o memoizado
 * - useMemo() para lista de cards memoizada
 * - Configura√ß√£o declarativa de cards (CARD_CONFIGS)
 * - Import de enum JobStatus para type safety
 *
 * Funcionalidades:
 * - 5 cards de status clic√°veis
 * - Navega√ß√£o para lista filtrada de vagas
 * - Anima√ß√µes de hover suaves
 * - Layout responsivo (2/3/5 colunas)
 * - √çcones visuais para cada status
 * - Cores de hover espec√≠ficas por status
 */

'use client';

import React, { useCallback, useMemo } from 'react';
import { useRouter } from 'next/navigation';
import { JobStatus } from '@/types';

import { JobStats } from '@/types';

// ========================================
// INTERFACES E TIPOS
// ========================================

interface StatusCardsProps {
  stats: JobStats;
}

// ========================================
// CONFIGURA√á√ÉO DECLARATIVA DOS CARDS
// ========================================

/**
 * CARD_CONFIGS: Configura√ß√£o centralizada de todos os cards
 *
 * Por que essa abordagem:
 * - Evita duplica√ß√£o de c√≥digo
 * - Facilita manuten√ß√£o (adicionar/remover cards)
 * - Configura√ß√£o visual centralizada
 * - Type safety com enum JobStatus
 * - Facilita testes unit√°rios
 *
 * Estrutura de cada config:
 * - status: Enum JobStatus para type safety
 * - label: Texto exibido no card
 * - icon: Emoji representativo do status
 * - hoverColor: Classe CSS para hover espec√≠fico
 */
const CARD_CONFIGS = [
  {
    status: JobStatus.APPLIED,
    label: 'Candidatura Enviada',
    icon: 'üìù', // Documento/formul√°rio
    hoverColor: 'hover:border-blue-300',
  },
  {
    status: JobStatus.TEST_PENDING,
    label: 'Teste Pendente',
    icon: '‚è≥', // Ampulheta/tempo
    hoverColor: 'hover:border-yellow-300',
  },
  {
    status: JobStatus.TEST_COMPLETED,
    label: 'Teste Conclu√≠do',
    icon: '‚úÖ', // Check/conclu√≠do
    hoverColor: 'hover:border-orange-300',
  },
  {
    status: JobStatus.INTERVIEW,
    label: 'Em Entrevista',
    icon: 'üó£Ô∏è', // Conversa/entrevista
    hoverColor: 'hover:border-purple-300',
  },
  {
    status: JobStatus.ACCEPTED,
    label: 'Aceitas',
    icon: 'üéâ', // Celebra√ß√£o/sucesso
    hoverColor: 'hover:border-green-300',
  },
] as const; // 'as const' para infer√™ncia de tipo mais precisa

const StatusCards: React.FC<StatusCardsProps> = ({ stats }) => {
  const router = useRouter();

  // ========================================
  // CALLBACKS MEMOIZADOS
  // ========================================

  /**
   * navigateToJobsWithFilter: Fun√ß√£o de navega√ß√£o memoizada
   *
   * @param status - Status opcional para filtrar vagas
   *
   * Por que useCallback:
   * - Evita cria√ß√£o de nova fun√ß√£o a cada render
   * - Importante para performance quando passado como prop
   * - Evita re-renders desnecess√°rios dos cards
   *
   * Funcionalidade:
   * - Com status: navega para /dashboard/jobs?status=APPLIED
   * - Sem status: navega para /dashboard/jobs (todas as vagas)
   */
  const navigateToJobsWithFilter = useCallback(
    (status?: string) => {
      const url = status
        ? `/dashboard/candidaturas/jobs?status=${status}`
        : '/dashboard/candidaturas/jobs';
      router.push(url);
    },
    [router]
  );

  // ========================================
  // MEMOIZA√á√ÉO DE ELEMENTOS
  // ========================================

  /**
   * cardElements: Lista de elementos JSX memoizada
   *
   * Por que memoizar:
   * - map() cria novos elementos a cada render
   * - Cada card tem m√∫ltiplas anima√ß√µes e estilos
   * - Evita re-cria√ß√£o desnecess√°ria de elementos DOM
   * - S√≥ recalcula quando stats.byStatus ou navigateToJobsWithFilter mudam
   *
   * Estrutura de cada card:
   * - button clic√°vel com hover effects
   * - Layout flex com √≠cone e n√∫mero
   * - Anima√ß√µes de escala no hover
   * - Label com transi√ß√£o de cor
   * - Cor de hover espec√≠fica por status
   */
  const cardElements = useMemo(() => {
    return CARD_CONFIGS.map(({ status, label, icon, hoverColor }) => {
      const count = stats?.byStatus?.[status] ?? 0; // ‚úÖ evita erro se byStatus for undefined

      return (
        <button
          key={status} // Chave √∫nica baseada no enum
          onClick={() => navigateToJobsWithFilter(status)}
          className={`bg-[color:var(--color-card)] p-3 rounded-lg border border-[color:var(--color-border)] hover:shadow-lg ${hoverColor} transition-all duration-200 text-left group`}
        >
          {/* Container flex para √≠cone e n√∫mero */}
          <div className='flex items-center justify-between mb-2'>
            {/* √çcone com anima√ß√£o de escala */}
            <div className='text-2xl group-hover:scale-110 transition-transform duration-200'>
              {icon}
            </div>
            {/* N√∫mero com anima√ß√£o de escala */}
            <div className='text-2xl font-bold text-[color:var(--color-card-foreground)] group-hover:scale-105 transition-transform duration-200'>
              {count}
            </div>
          </div>
          {/* Label com transi√ß√£o de cor */}
          <div className='text-sm font-medium text-[color:var(--color-muted-foreground)] group-hover:text-[color:var(--color-card-foreground)] transition-colors duration-200'>
            {label}
          </div>
        </button>
      );
    });
  }, [stats?.byStatus, navigateToJobsWithFilter]); // Depend√™ncias para rec√°lculo

  // ========================================
  // RENDERIZA√á√ÉO
  // ========================================

  /**
   * Grid responsivo:
   * - grid-cols-2: 2 colunas em mobile
   * - md:grid-cols-3: 3 colunas em tablet
   * - lg:grid-cols-5: 5 colunas em desktop
   * - gap-3: Espa√ßamento entre cards
   * - mb-6: Margem inferior
   */
  return (
    <div className='grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-3 mb-6'>
      {cardElements}
    </div>
  );
};

/**
 * React.memo: Otimiza√ß√£o para evitar re-renders
 *
 * StatusCards s√≥ re-renderiza quando:
 * - stats.byStatus muda (nova contagem de vagas)
 * - Props mudam
 *
 * Evita re-render quando:
 * - Outros componentes da p√°gina mudam
 * - Estado n√£o relacionado muda
 * - Navega√ß√£o entre p√°ginas que n√£o afetam stats
 *
 * Performance impact:
 * - Evita re-execu√ß√£o do useMemo
 * - Evita re-cria√ß√£o de 5 elementos button
 * - Melhora responsividade em intera√ß√µes
 */
export default React.memo(StatusCards);
